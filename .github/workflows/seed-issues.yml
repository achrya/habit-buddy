name: Seed GitHub Issues

on:
  push:
    branches: [ master ]
    paths:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/ISSUES.md'
      - '.github/workflows/seed-issues.yml'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'List issues without creating them (true/false)'
        required: false
        default: 'false'

permissions:
  contents: read
  issues: write

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create issues from templates
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const repo = context.repo;
            const dryRun = ((context.payload && context.payload.inputs && context.payload.inputs.dry_run) || 'false').toLowerCase() === 'true';
            const templatesDir = path.join(process.cwd(), '.github', 'ISSUE_TEMPLATE');

            if (!fs.existsSync(templatesDir)) {
              core.info(`No templates directory found at ${templatesDir}. Nothing to do.`);
              return;
            }

            const templateFiles = fs.readdirSync(templatesDir).filter(f => f.toLowerCase().endsWith('.md'));
            if (templateFiles.length === 0) {
              core.info('No issue template files found.');
              return;
            }

            async function issueExistsWithTitle(title) {
              const query = `repo:${repo.owner}/${repo.repo} is:issue \"${title.replace(/"/g, '\\"')}\"`;
              const { data } = await github.rest.search.issuesAndPullRequests({ q: query });
              return data.items.some(item => item.title === title);
            }

            for (const fileName of templateFiles) {
              const fullPath = path.join(templatesDir, fileName);
              const body = fs.readFileSync(fullPath, 'utf8');

              const headingMatch = body.match(/^#\s+(.+)$/m);
              const inferredTitle = headingMatch ? headingMatch[1].trim() : fileName
                .replace(/^\d+-/, '')
                .replace(/[-_]/g, ' ')
                .replace(/\.md$/i, '')
                .trim();

              const title = inferredTitle;
              core.info(`Processing template: ${fileName} -> Title: ${title}`);

              if (await issueExistsWithTitle(title)) {
                core.info(`Skipping. Issue already exists with title: ${title}`);
                continue;
              }

              if (dryRun) {
                core.info(`[dry-run] Would create issue: ${title}`);
                continue;
              }

              const created = await github.rest.issues.create({
                owner: repo.owner,
                repo: repo.repo,
                title,
                body
              });

              core.info(`Created issue #${created.data.number}: ${title}`);
            }
