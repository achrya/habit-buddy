[
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/19",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/19/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/19/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/19/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/19",
    "id": 3438508879,
    "node_id": "I_kwDOPyeHW87M83tP",
    "number": 19,
    "title": "calendar ux logic",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:09Z",
    "updated_at": "2025-09-21T18:51:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üóìÔ∏è Calendar UX Logic Improvement\nabout: Calendar day click logic is too restrictive without proper user feedback\ntitle: \"Improve calendar day click logic and user experience\"\nlabels: [\"ux\", \"enhancement\", \"medium\", \"calendar\"]\nassignees: []\n---\n\n## üóìÔ∏è UX Issue Description\n\nThe calendar `onDayClick` logic only allows today's date to be clicked but provides poor user feedback for historical dates and doesn't support future planning features that users might expect.\n\n## üìç Location\n\n**File:** `/src/app/features/calendar/components/calendar/calendar.component.ts`\n**Method:** `onDayClick()` (lines 133-150)\n\n## üîç Current Behavior\n\n```typescript\nprotected async onDayClick(dateStr: string): Promise<void> {\n  const today = new Date().toISOString().slice(0, 10);\n  if (dateStr !== today) {\n    this.dialogService.showWarning('Only today can be toggled (no backfill).');\n    return;\n  }\n  // ... only today's check-in logic\n}\n```\n\n**Problems:**\n1. **Restrictive Logic**: Users can't interact with any historical data\n2. **Poor Feedback**: Generic warning doesn't explain why or offer alternatives\n3. **Missing Features**: No way to view habit details for specific dates\n4. **Inconsistent UX**: Calendar suggests interactivity but most days are non-functional\n\n## ‚úÖ Expected Behavior\n\n- Clear visual indication of clickable vs non-clickable days\n- Informative feedback for different types of day clicks\n- Useful interactions for historical dates (view details, stats)\n- Better user understanding of calendar functionality\n\n## üîß Suggested Fix\n\n**1. Enhanced day click logic with different actions:**\n\n```typescript\nprotected async onDayClick(dateStr: string): Promise<void> {\n  const today = new Date().toISOString().slice(0, 10);\n  const clickedDate = new Date(dateStr);\n  const todayDate = new Date(today);\n  \n  // Handle different date scenarios\n  if (dateStr === today) {\n    await this.handleTodayClick(dateStr);\n  } else if (clickedDate < todayDate) {\n    this.handlePastDateClick(dateStr);\n  } else {\n    this.handleFutureDateClick(dateStr);\n  }\n}\n\nprivate async handleTodayClick(dateStr: string): Promise<void> {\n  const habit = this.getSelectedHabit();\n  if (!habit) {\n    this.dialogService.showInfo('Select a habit to check in for today.');\n    return;\n  }\n\n  const result = await this.habitService.toggleCheckinToday(habit.id);\n  if (result.success) {\n    this.notificationService.playBell();\n    this.notificationService.triggerConfetti();\n  } else if (result.message) {\n    this.dialogService.showError(result.message);\n  }\n}\n\nprivate handlePastDateClick(dateStr: string): void {\n  const habit = this.getSelectedHabit();\n  \n  if (this.calendarMode() === 'all') {\n    this.showAllHabitsForDate(dateStr);\n  } else if (habit) {\n    this.showHabitDetailsForDate(habit, dateStr);\n  }\n}\n\nprivate handleFutureDateClick(dateStr: string): void {\n  const clickedDate = new Date(dateStr);\n  const daysFromNow = Math.ceil((clickedDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n  \n  this.dialogService.showInfo(\n    `Future Planning`,\n    `This date is ${daysFromNow} day${daysFromNow === 1 ? '' : 's'} from now. You can check in when the date arrives!`\n  );\n}\n```\n\n**2. Add informative modals for historical data:**\n\n```typescript\nprivate showHabitDetailsForDate(habit: Habit, dateStr: string): void {\n  const isCompleted = !!(habit.checkIns && habit.checkIns[dateStr]);\n  const date = new Date(dateStr);\n  const dateDisplay = date.toLocaleDateString(undefined, { \n    weekday: 'long', \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric' \n  });\n\n  const title = `${habit.title} - ${dateDisplay}`;\n  const message = isCompleted \n    ? `‚úÖ You completed this habit on ${dateDisplay}. Great work!`\n    : `‚≠ï This habit was not completed on ${dateDisplay}.`;\n\n  // Add additional context\n  const stats = this.habitService.calcStreaksForHabit(habit);\n  const additionalInfo = `\\n\\nCurrent streak: ${stats.current} days\\nLongest streak: ${stats.longest} days`;\n\n  this.dialogService.showInfo(title, message + additionalInfo);\n}\n\nprivate showAllHabitsForDate(dateStr: string): void {\n  const date = new Date(dateStr);\n  const dateDisplay = date.toLocaleDateString(undefined, { \n    weekday: 'long', \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric' \n  });\n\n  const completedHabits = this.habits().filter(habit => \n    habit.checkIns && habit.checkIns[dateStr]\n  );\n\n  const totalHabits = this.habits().length;\n  const completedCount = completedHabits.length;\n\n  let message = `On ${dateDisplay}, you completed ${completedCount} out of ${totalHabits} habits.`;\n  \n  if (completedHabits.length > 0) {\n    message += `\\n\\nCompleted habits:\\n${completedHabits.map(h => `‚Ä¢ ${h.title}`).join('\\n')}`;\n  }\n\n  this.dialogService.showInfo(`Daily Summary - ${dateDisplay}`, message);\n}\n```\n\n**3. Add visual indicators for different day types:**\n\n```typescript\nprotected getDayClasses(dateStr: string): string {\n  const today = new Date().toISOString().slice(0, 10);\n  const clickedDate = new Date(dateStr);\n  const todayDate = new Date(today);\n  \n  let classes = 'calendar-day';\n  \n  if (dateStr === today) {\n    classes += ' today clickable';\n  } else if (clickedDate < todayDate) {\n    classes += ' past clickable-info';\n  } else {\n    classes += ' future clickable-info';\n  }\n  \n  // Add completion status\n  if (this.isDayChecked(dateStr)) {\n    classes += ' completed';\n  }\n  \n  return classes;\n}\n\nprotected getDayTooltip(dateStr: string): string {\n  const today = new Date().toISOString().slice(0, 10);\n  const clickedDate = new Date(dateStr);\n  const todayDate = new Date(today);\n  \n  if (dateStr === today) {\n    return 'Click to check in for today';\n  } else if (clickedDate < todayDate) {\n    return 'Click to view details for this date';\n  } else {\n    return 'Future date - check in when it arrives';\n  }\n}\n```\n\n**4. Update template with better visual feedback:**\n\n```html\n<div \n  class=\"{{ getDayClasses(day.date) }}\"\n  title=\"{{ getDayTooltip(day.date) }}\"\n  (click)=\"onDayClick(day.date)\"\n  [style.cursor]=\"day.date ? 'pointer' : 'default'\">\n  {{ day.day }}\n  <!-- Visual indicators -->\n  <div class=\"day-status\" *ngIf=\"day.date\">\n    <span class=\"completion-dot\" *ngIf=\"isDayChecked(day.date)\">‚úì</span>\n  </div>\n</div>\n```\n\n## üö® Impact\n\n- **Severity:** Medium\n- **User Experience:** Much more intuitive and informative calendar interaction\n- **Feature Discovery**: Users understand what they can and cannot do\n- **Data Utilization**: Historical data becomes useful for reflection and analysis\n\n## üìã Acceptance Criteria\n\n- [ ] Different click behaviors for today, past, and future dates\n- [ ] Informative dialogs for historical date interactions\n- [ ] Clear visual indicators for different day types\n- [ ] Helpful tooltips explaining what each day click does\n- [ ] No regression in today's check-in functionality\n- [ ] Improved user understanding of calendar features\n- [ ] Better accessibility with proper ARIA labels",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/19/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/19/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/18",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/18/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/18/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/18/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/18",
    "id": 3438508871,
    "node_id": "I_kwDOPyeHW87M83tH",
    "number": 18,
    "title": "type safety improvements",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:08Z",
    "updated_at": "2025-09-21T18:51:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üîí Type Safety Improvements\nabout: Loose typing in several critical methods causing potential runtime errors\ntitle: \"Fix type safety issues across services and components\"\nlabels: [\"typescript\", \"type-safety\", \"medium\", \"refactor\"]\nassignees: []\n---\n\n## üîí Type Safety Issue Description\n\nSeveral methods have loose typing that could lead to runtime errors and reduces code maintainability. The most critical is `NotificationService.checkReminders()` accepting `any[]` instead of `Habit[]`.\n\n## üìç Location\n\n**Files with type safety issues:**\n- `/src/app/shared/services/notification.service.ts` (line 76)\n- `/src/app/shared/services/habit.service.ts` (various methods)\n- Component event handlers with loose typing\n\n## üîç Current Behavior\n\n**1. NotificationService.checkReminders():**\n```typescript\ncheckReminders(habits: any[]): void {  // ‚ùå Should be Habit[]\n  if (typeof window === 'undefined') return;\n  \n  habits.forEach(habit => {\n    if (!habit.reminder) return;  // No type safety for habit properties\n    // ... rest of method\n  });\n}\n```\n\n**2. Loose event handler typing:**\n```typescript\n// In various components\nprotected onSomeEvent(event: any): void {  // ‚ùå Should be specific type\n  // ...\n}\n```\n\n**3. Generic object types:**\n```typescript\n// In various places\nconst config: any = { ... };  // ‚ùå Should have proper interface\n```\n\n## ‚úÖ Expected Behavior\n\n- Strong typing throughout the codebase\n- Proper interfaces for all data structures\n- Type-safe event handlers\n- No use of `any` type except where absolutely necessary\n\n## üîß Suggested Fix\n\n**1. Fix NotificationService typing:**\n\n```typescript\nimport { Habit } from '../models/habit.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  checkReminders(habits: Habit[]): void {\n    if (typeof window === 'undefined') return;\n    \n    const now = new Date();\n    const minsNow = now.getHours() * 60 + now.getMinutes();\n    const weekday = now.getDay();\n\n    habits.forEach(habit => {\n      if (!habit.reminder) return;\n      if (!habit.reminder.days.includes(weekday)) return;\n\n      const lastNotifiedKey = `hb_notified_${habit.id}_${now.toISOString().slice(0, 16)}`;\n      if (localStorage.getItem(lastNotifiedKey)) return;\n\n      const target = this.hhmmToMins(habit.reminder.time);\n      const diff = Math.min(\n        Math.abs(minsNow - target),\n        24 * 60 - Math.abs(minsNow - target)\n      );\n\n      if (diff <= (habit.reminder.window || 120) / 2) {\n        this.notify(`Reminder: ${habit.title}`, `Time to ${habit.title}`);\n        this.playBell();\n        this.triggerConfetti();\n        localStorage.setItem(lastNotifiedKey, '1');\n      }\n    });\n  }\n}\n```\n\n**2. Create proper interfaces for configuration objects:**\n\n```typescript\n// shared/models/notification.model.ts\nexport interface NotificationOptions {\n  title: string;\n  body: string;\n  silent?: boolean;\n  icon?: string;\n}\n\nexport interface AudioContextConfig {\n  type: OscillatorType;\n  frequency: number;\n  gain: number;\n  duration: number;\n}\n\nexport interface ConfettiConfig {\n  particleCount: number;\n  spread: number;\n  origin: { y: number };\n}\n```\n\n**3. Fix HabitService method signatures:**\n\n```typescript\nexport class HabitService {\n  // Strong typing for method parameters\n  addHabit(title: string, reminder?: Reminder | null): Habit {\n    if (!title || typeof title !== 'string') {\n      throw new Error('Title must be a non-empty string');\n    }\n    \n    const habit: Habit = {\n      id: this.generateId(),\n      title: title.trim(),\n      daysTarget: 30,\n      color: this.pickColor(this.habits().length),\n      createdAt: new Date().toISOString().slice(0, 10),\n      checkIns: {},\n      reminder: reminder || null,\n      badge: null\n    };\n\n    const updatedHabits = [habit, ...this.habits()];\n    this.habitsSubject.next(updatedHabits);\n    return habit;\n  }\n\n  // Proper return type specification\n  async toggleCheckinToday(habitId: string): Promise<CheckinResult> {\n    const habit = this.habits().find(h => h.id === habitId);\n    if (!habit) {\n      return { success: false, message: 'Habit not found.' };\n    }\n    // ... rest of method\n  }\n\n  // Strong typing for utility methods\n  private pickColor(index: number): string {\n    if (typeof index !== 'number' || index < 0) {\n      throw new Error('Index must be a non-negative number');\n    }\n    return this.COLORS[index % this.COLORS.length];\n  }\n}\n\n// Define result interfaces\nexport interface CheckinResult {\n  success: boolean;\n  message?: string;\n}\n```\n\n**4. Fix component event handlers:**\n\n```typescript\n// Instead of generic any\nprotected onHabitAdded(event: any): void { ... }\n\n// Use specific types\nexport interface HabitAddedEvent {\n  title: string;\n  reminder?: Reminder | null;\n}\n\nprotected onHabitAdded(event: HabitAddedEvent): void {\n  const newHabit = this.habitService.addHabit(event.title, event.reminder);\n  // ... rest of method\n}\n```\n\n**5. Add strict TypeScript configuration:**\n\n```json\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"exactOptionalPropertyTypes\": true\n  }\n}\n```\n\n**6. Create type guards for runtime validation:**\n\n```typescript\n// shared/utils/type-guards.ts\nexport function isHabit(obj: any): obj is Habit {\n  return (\n    obj &&\n    typeof obj === 'object' &&\n    typeof obj.id === 'string' &&\n    typeof obj.title === 'string' &&\n    typeof obj.daysTarget === 'number' &&\n    typeof obj.color === 'string' &&\n    typeof obj.createdAt === 'string' &&\n    typeof obj.checkIns === 'object'\n  );\n}\n\nexport function isReminder(obj: any): obj is Reminder {\n  return (\n    obj &&\n    typeof obj === 'object' &&\n    typeof obj.time === 'string' &&\n    Array.isArray(obj.days) &&\n    typeof obj.window === 'number'\n  );\n}\n\n// Usage in services\ncheckReminders(habits: unknown[]): void {\n  const validHabits = habits.filter(isHabit);\n  // ... process validHabits with full type safety\n}\n```\n\n## üö® Impact\n\n- **Severity:** Medium\n- **Code Quality:** Significantly improved maintainability and reliability\n- **Developer Experience:** Better IDE support and error catching\n- **Runtime Safety:** Fewer potential runtime errors\n\n## üìã Acceptance Criteria\n\n- [ ] Remove all unnecessary `any` types\n- [ ] Add proper interfaces for all data structures\n- [ ] Update method signatures with specific types\n- [ ] Add type guards for runtime validation where needed\n- [ ] Enable strict TypeScript compiler options\n- [ ] Ensure no type-related runtime errors\n- [ ] All components and services have proper typing",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/18/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/18/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/17",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/17/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/17/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/17/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/17",
    "id": 3438508866,
    "node_id": "I_kwDOPyeHW87M83tC",
    "number": 17,
    "title": "memory leak intervals",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:08Z",
    "updated_at": "2025-09-21T18:51:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üîß Memory Leak - Interval Cleanup\nabout: Inconsistent interval cleanup causing potential memory leaks\ntitle: \"Fix potential memory leaks from inconsistent interval cleanup\"\nlabels: [\"bug\", \"memory-leak\", \"medium\", \"cleanup\"]\nassignees: []\n---\n\n## üîß Memory Leak Issue Description\n\nInterval cleanup in `ngOnDestroy` is not implemented consistently across all components that create intervals, leading to potential memory leaks and continued execution of reminder checks after components are destroyed.\n\n## üìç Location\n\n**Files with interval issues:**\n- `/src/app/features/goals/components/goals/goals.component.ts` (lines 192-196) ‚úÖ Has cleanup\n- `/src/app/features/statistics/components/stats/stats.component.ts` (lines 48-55) ‚ùå No cleanup\n- `/src/app/features/calendar/components/calendar/calendar.component.ts` (lines 81-87) ‚ùå No cleanup  \n- `/src/app/features/reminders/components/reminders/reminders.component.ts` (lines 42-48) ‚ùå No cleanup\n\n## üîç Current Behavior\n\n**GoalsComponent (Good example):**\n```typescript\nexport class GoalsComponent implements OnInit, OnDestroy {\n  private reminderCheckInterval?: number;\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.reminderCheckInterval = window.setInterval(() => {\n        this.checkReminders();\n      }, 30000);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.reminderCheckInterval) {\n      clearInterval(this.reminderCheckInterval);\n    }\n  }\n}\n```\n\n**Other components (Problematic):**\n```typescript\nngOnInit(): void {\n  // ‚ùå No cleanup - memory leak potential\n  setInterval(() => {\n    this.checkReminders();\n  }, 30000);\n}\n```\n\n## üö® Problems\n\n1. **Memory Leaks**: Intervals continue running after component destruction\n2. **Unnecessary Processing**: Reminder checks continue when not needed\n3. **Battery Drain**: Background intervals consume resources\n4. **Potential Errors**: Accessing destroyed component properties\n\n## ‚úÖ Expected Behavior\n\n- All intervals properly cleaned up in `ngOnDestroy`\n- No background processing after component destruction\n- Consistent interval management pattern across components\n\n## üîß Suggested Fix\n\n**1. Fix StatsComponent:**\n\n```typescript\nexport class StatsComponent implements OnInit, OnDestroy {\n  private reminderCheckInterval?: number;\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.reminderCheckInterval = window.setInterval(() => {\n        this.checkReminders();\n      }, 30000);\n    }\n    this.checkReminders();\n  }\n\n  ngOnDestroy(): void {\n    if (this.reminderCheckInterval) {\n      clearInterval(this.reminderCheckInterval);\n    }\n  }\n}\n```\n\n**2. Fix CalendarComponent:**\n\n```typescript\nexport class CalendarComponent implements OnInit, OnDestroy {\n  private reminderCheckInterval?: number;\n\n  ngOnInit(): void {\n    // ... existing query param logic\n    \n    if (typeof window !== 'undefined') {\n      this.reminderCheckInterval = window.setInterval(() => {\n        this.checkReminders();\n      }, 30000);\n    }\n    this.checkReminders();\n  }\n\n  ngOnDestroy(): void {\n    if (this.reminderCheckInterval) {\n      clearInterval(this.reminderCheckInterval);\n    }\n  }\n}\n```\n\n**3. Fix RemindersComponent:**\n\n```typescript\nexport class RemindersComponent implements OnInit, OnDestroy {\n  private reminderCheckInterval?: number;\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.reminderCheckInterval = window.setInterval(() => {\n        this.checkReminders();\n      }, 30000);\n    }\n    this.checkReminders();\n  }\n\n  ngOnDestroy(): void {\n    if (this.reminderCheckInterval) {\n      clearInterval(this.reminderCheckInterval);\n    }\n  }\n}\n```\n\n**4. Create reusable interval management mixin (Optional enhancement):**\n\n```typescript\n// shared/mixins/interval-manager.mixin.ts\nexport interface IntervalManager {\n  intervals: Set<number>;\n  createInterval(callback: () => void, delay: number): number;\n  clearAllIntervals(): void;\n}\n\nexport function withIntervalManager<T extends Constructor>(Base: T) {\n  return class extends Base implements IntervalManager {\n    intervals = new Set<number>();\n\n    createInterval(callback: () => void, delay: number): number {\n      if (typeof window === 'undefined') return -1;\n      \n      const intervalId = window.setInterval(callback, delay);\n      this.intervals.add(intervalId);\n      return intervalId;\n    }\n\n    clearInterval(intervalId: number): void {\n      if (this.intervals.has(intervalId)) {\n        clearInterval(intervalId);\n        this.intervals.delete(intervalId);\n      }\n    }\n\n    clearAllIntervals(): void {\n      this.intervals.forEach(id => clearInterval(id));\n      this.intervals.clear();\n    }\n  };\n}\n\n// Usage in components:\nexport class StatsComponent extends withIntervalManager(Component) implements OnInit, OnDestroy {\n  ngOnInit(): void {\n    this.createInterval(() => this.checkReminders(), 30000);\n    this.checkReminders();\n  }\n\n  ngOnDestroy(): void {\n    this.clearAllIntervals();\n  }\n}\n```\n\n## üö® Impact\n\n- **Severity:** Medium\n- **Memory Usage:** Prevents accumulating intervals in SPA navigation\n- **Performance:** Eliminates unnecessary background processing\n- **Battery Life:** Reduces power consumption on mobile devices\n\n## üß™ Testing\n\n1. Navigate between components multiple times\n2. Check browser DevTools for active intervals\n3. Verify intervals are properly cleared on navigation\n4. Monitor memory usage over time\n\n## üìã Acceptance Criteria\n\n- [ ] All components with intervals implement OnDestroy\n- [ ] Intervals properly stored and cleared in ngOnDestroy\n- [ ] No memory leaks detectable in DevTools\n- [ ] Background processing stops when components are destroyed\n- [ ] Consistent interval management pattern across all components\n- [ ] Optional: Implement reusable interval management solution",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/17/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/17/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/16",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/16/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/16/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/16/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/16",
    "id": 3438508856,
    "node_id": "I_kwDOPyeHW87M83s4",
    "number": 16,
    "title": "time validation edge cases",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:07Z",
    "updated_at": "2025-09-21T18:51:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: ‚è∞ Time Validation Edge Cases\nabout: Regex validation doesn't handle all time input edge cases\ntitle: \"Fix time validation regex in ReminderModalComponent\"\nlabels: [\"bug\", \"validation\", \"low\", \"edge-cases\"]\nassignees: []\n---\n\n## ‚è∞ Validation Issue Description\n\nThe time validation regex in `ReminderModalComponent.isValidTime()` doesn't handle edge cases like '24:00', leading zeros, or other time format variations properly.\n\n## üìç Location\n\n**File:** `/src/app/features/reminders/components/reminder-modal/reminder-modal.component.ts`\n**Method:** `isValidTime()` (lines 119-122)\n\n## üîç Current Behavior\n\n```typescript\nprivate isValidTime(time: string): boolean {\n  const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\n  return timeRegex.test(time);\n}\n```\n\n**Problems with current regex:**\n1. **Doesn't handle '24:00'**: Some systems use 24:00 to represent midnight\n2. **Inconsistent leading zeros**: Allows both '9:30' and '09:30' but validation may be inconsistent\n3. **No validation of logical time**: Accepts invalid combinations\n4. **Limited format support**: Only supports HH:MM, not other common formats\n\n## ‚úÖ Expected Behavior\n\n- Handle all valid 24-hour time formats consistently\n- Provide clear feedback for invalid times\n- Support common time input variations\n- Normalize time format for consistent storage\n\n## üîß Suggested Fix\n\n**Enhanced time validation with normalization:**\n\n```typescript\nprivate isValidTime(time: string): boolean {\n  if (!time || typeof time !== 'string') {\n    return false;\n  }\n\n  // Trim whitespace\n  const trimmedTime = time.trim();\n  \n  // Handle empty string\n  if (trimmedTime === '') {\n    return false;\n  }\n\n  // Enhanced regex for 24-hour format\n  // Accepts: HH:MM, H:MM, with optional leading zeros\n  const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$|^24:00$/;\n  \n  if (!timeRegex.test(trimmedTime)) {\n    return false;\n  }\n\n  // Additional validation for edge cases\n  const [hoursStr, minutesStr] = trimmedTime.split(':');\n  const hours = parseInt(hoursStr, 10);\n  const minutes = parseInt(minutesStr, 10);\n\n  // Validate ranges\n  if (hours < 0 || hours > 24) return false;\n  if (minutes < 0 || minutes > 59) return false;\n  \n  // Special case: 24:00 is valid (represents midnight of next day)\n  // but 24:XX (where XX > 00) is invalid\n  if (hours === 24 && minutes !== 0) {\n    return false;\n  }\n\n  return true;\n}\n\n// Helper method to normalize time format\nprivate normalizeTime(time: string): string {\n  if (!this.isValidTime(time)) {\n    return time; // Return as-is if invalid\n  }\n\n  const trimmedTime = time.trim();\n  \n  // Convert 24:00 to 00:00 for consistent storage\n  if (trimmedTime === '24:00') {\n    return '00:00';\n  }\n\n  // Ensure consistent HH:MM format with leading zeros\n  const [hoursStr, minutesStr] = trimmedTime.split(':');\n  const hours = parseInt(hoursStr, 10);\n  const minutes = parseInt(minutesStr, 10);\n\n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n}\n```\n\n**Enhanced save method with normalization:**\n\n```typescript\nprotected save(): void {\n  const time = this.normalizeTime(this.reminderForm.time);\n  const window = Math.max(5, Math.min(1440, parseInt(this.reminderForm.window.toString(), 10) || 120));\n  const days = [...this.selectedDays()];\n\n  if (!this.isValidTime(time)) {\n    this.dialogService.showError(\n      'Please enter a valid time in HH:MM format (00:00 to 23:59 or 24:00)'\n    );\n    return;\n  }\n\n  if (!days.length) {\n    this.dialogService.showWarning('No days selected. This will disable reminders for this habit.');\n  }\n\n  const reminder: Reminder = { time, days, window };\n  this.saveReminder.emit({ habitId: this.habitId, reminder });\n  this.close();\n}\n```\n\n**Alternative: More comprehensive time parsing:**\n\n```typescript\nprivate parseAndValidateTime(timeInput: string): { isValid: boolean; normalizedTime?: string; error?: string } {\n  if (!timeInput || typeof timeInput !== 'string') {\n    return { isValid: false, error: 'Time is required' };\n  }\n\n  const trimmed = timeInput.trim().toLowerCase();\n  \n  // Handle common formats\n  const formats = [\n    /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/, // HH:MM or H:MM\n    /^24:00$/, // Special case for midnight\n    /^([0-1]?[0-9]|2[0-3])\\.([0-5][0-9])$/, // HH.MM format\n    /^([0-1]?[0-9]|2[0-3])([0-5][0-9])$/, // HHMM format\n  ];\n\n  for (const format of formats) {\n    const match = trimmed.match(format);\n    if (match) {\n      let hours: number, minutes: number;\n      \n      if (trimmed === '24:00') {\n        return { isValid: true, normalizedTime: '00:00' };\n      }\n      \n      if (format === formats[2]) { // HH.MM\n        [, hours, minutes] = match.map(Number);\n      } else if (format === formats[3]) { // HHMM\n        hours = Math.floor(Number(match[1]) / 100);\n        minutes = Number(match[1]) % 100;\n      } else { // HH:MM\n        [, hours, minutes] = match.map(Number);\n      }\n\n      if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {\n        const normalizedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n        return { isValid: true, normalizedTime };\n      }\n    }\n  }\n\n  return { \n    isValid: false, \n    error: 'Please enter time in HH:MM format (00:00 to 23:59)' \n  };\n}\n```\n\n## üö® Impact\n\n- **Severity:** Low\n- **User Experience:** Better handling of time input variations\n- **Data Consistency:** Normalized time storage format\n- **Edge Cases:** Proper handling of midnight and format variations\n\n## üß™ Test Cases\n\nTest the following inputs:\n- Valid: '09:30', '9:30', '00:00', '23:59', '24:00'\n- Invalid: '25:00', '12:60', '24:30', '', '12:', ':30', 'abc'\n\n## üìã Acceptance Criteria\n\n- [ ] All valid 24-hour time formats accepted\n- [ ] Invalid times properly rejected with helpful error messages\n- [ ] Time format normalized for consistent storage\n- [ ] Edge case '24:00' handled correctly (converted to '00:00')\n- [ ] Leading zeros handled consistently\n- [ ] User-friendly error messages for invalid formats",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/16/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/16/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/15",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/15/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/15/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/15/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/15",
    "id": 3438508849,
    "node_id": "I_kwDOPyeHW87M83sx",
    "number": 15,
    "title": "error handling import service",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:07Z",
    "updated_at": "2025-09-21T18:51:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üö® Error Handling Improvements in ImportService\nabout: Generic error handling without specific user feedback\ntitle: \"Add proper error handling and user feedback in ImportService\"\nlabels: [\"bug\", \"error-handling\", \"medium\", \"user-experience\"]\nassignees: []\n---\n\n## üö® Error Handling Issue Description\n\nThe `ImportService` catches all errors generically without providing specific error types or user-friendly messages, making it difficult for users to understand and fix import problems.\n\n## üìç Location\n\n**File:** `/src/app/shared/components/import-modal/import.service.ts`\n**Methods:** `importHabits()`, `importHabitsWithOptions()`, `previewImport()` (multiple catch blocks)\n\n## üîç Current Behavior\n\n```typescript\ntry {\n  // ... import logic\n} catch (error) {\n  console.error('Import error:', error);\n  return { success: false, message: 'Failed to parse JSON file. Please check the file format.' };\n}\n```\n\n**Problems:**\n1. **Generic Error Messages**: All errors result in the same \"Failed to parse JSON\" message\n2. **Lost Context**: Specific error information is only logged, not shown to user\n3. **No Error Classification**: Can't distinguish between JSON syntax errors, validation errors, etc.\n4. **Poor UX**: Users don't know how to fix their import files\n\n## ‚úÖ Expected Behavior\n\n- Specific error messages for different error types\n- Helpful suggestions for fixing common issues\n- Proper error classification and handling\n- Detailed validation feedback\n\n## üîß Suggested Fix\n\n**1. Create error classification system:**\n\n```typescript\nexport enum ImportErrorType {\n  INVALID_JSON = 'INVALID_JSON',\n  INVALID_STRUCTURE = 'INVALID_STRUCTURE',\n  MISSING_REQUIRED_FIELDS = 'MISSING_REQUIRED_FIELDS',\n  INVALID_DATA_TYPES = 'INVALID_DATA_TYPES',\n  CORRUPTED_DATA = 'CORRUPTED_DATA',\n  EMPTY_FILE = 'EMPTY_FILE'\n}\n\nexport interface ImportError {\n  type: ImportErrorType;\n  message: string;\n  details?: string;\n  suggestions?: string[];\n}\n```\n\n**2. Enhanced error handling:**\n\n```typescript\nimportHabits(jsonData: string): ImportResult {\n  try {\n    // Validate input\n    if (!jsonData || jsonData.trim().length === 0) {\n      return {\n        success: false,\n        message: 'Import file is empty. Please select a valid JSON file with habit data.'\n      };\n    }\n\n    const data = this.parseAndValidateData(jsonData);\n    if (!data) {\n      return this.createValidationErrorResult(jsonData);\n    }\n\n    // ... rest of import logic\n  } catch (error) {\n    return this.handleImportError(error);\n  }\n}\n\nprivate handleImportError(error: any): ImportResult {\n  if (error instanceof SyntaxError) {\n    return {\n      success: false,\n      message: 'Invalid JSON format detected.',\n      details: `JSON parsing failed: ${error.message}`,\n      suggestions: [\n        'Ensure the file is valid JSON format',\n        'Check for missing commas, brackets, or quotes',\n        'Use a JSON validator to check your file',\n        'Make sure the file wasn\\'t corrupted during transfer'\n      ]\n    };\n  }\n\n  if (error.name === 'ValidationError') {\n    return {\n      success: false,\n      message: 'Habit data validation failed.',\n      details: error.message,\n      suggestions: [\n        'Ensure all habits have required fields (id, title, daysTarget, etc.)',\n        'Check that data types are correct (numbers for daysTarget, strings for title)',\n        'Verify checkIns is an object with date keys',\n        'Export habits from the app to see the correct format'\n      ]\n    };\n  }\n\n  // Generic fallback with more helpful message\n  console.error('Unexpected import error:', error);\n  return {\n    success: false,\n    message: 'An unexpected error occurred during import.',\n    details: error.message || 'Unknown error',\n    suggestions: [\n      'Try exporting and re-importing a small sample to test the format',\n      'Check that the file isn\\'t corrupted',\n      'Contact support if the problem persists'\n    ]\n  };\n}\n```\n\n**3. Detailed validation with specific feedback:**\n\n```typescript\nprivate parseAndValidateData(jsonData: string, validateData: boolean = true): Habit[] | null {\n  let data: any;\n  \n  try {\n    data = JSON.parse(jsonData);\n  } catch (syntaxError) {\n    throw new SyntaxError(`JSON parsing failed at position ${(syntaxError as any).position || 'unknown'}: ${syntaxError.message}`);\n  }\n  \n  if (!Array.isArray(data)) {\n    const validationError = new Error('Data must be an array of habit objects');\n    validationError.name = 'ValidationError';\n    throw validationError;\n  }\n\n  if (data.length === 0) {\n    const validationError = new Error('Import file contains no habits');\n    validationError.name = 'ValidationError';\n    throw validationError;\n  }\n\n  if (validateData) {\n    const validationResult = this.validateHabitDataDetailed(data);\n    if (!validationResult.isValid) {\n      const validationError = new Error(validationResult.errorMessage);\n      validationError.name = 'ValidationError';\n      throw validationError;\n    }\n  }\n\n  return data as Habit[];\n}\n```\n\n**4. Detailed validation with field-specific errors:**\n\n```typescript\nprivate validateHabitDataDetailed(data: any[]): { isValid: boolean; errorMessage?: string } {\n  for (let i = 0; i < data.length; i++) {\n    const habit = data[i];\n    const habitIndex = i + 1;\n    \n    if (!habit || typeof habit !== 'object') {\n      return {\n        isValid: false,\n        errorMessage: `Habit #${habitIndex}: Expected object, got ${typeof habit}`\n      };\n    }\n\n    // Check required fields\n    const requiredFields = [\n      { name: 'id', type: 'string' },\n      { name: 'title', type: 'string' },\n      { name: 'daysTarget', type: 'number' },\n      { name: 'color', type: 'string' },\n      { name: 'createdAt', type: 'string' },\n      { name: 'checkIns', type: 'object' }\n    ];\n\n    for (const field of requiredFields) {\n      if (!(field.name in habit)) {\n        return {\n          isValid: false,\n          errorMessage: `Habit #${habitIndex} (\"${habit.title || 'Unknown'}\"): Missing required field \"${field.name}\"`\n        };\n      }\n\n      if (typeof habit[field.name] !== field.type) {\n        return {\n          isValid: false,\n          errorMessage: `Habit #${habitIndex} (\"${habit.title || 'Unknown'}\"): Field \"${field.name}\" should be ${field.type}, got ${typeof habit[field.name]}`\n        };\n      }\n    }\n\n    // Additional validation\n    if (habit.daysTarget <= 0) {\n      return {\n        isValid: false,\n        errorMessage: `Habit #${habitIndex} (\"${habit.title}\"): daysTarget must be greater than 0`\n      };\n    }\n  }\n\n  return { isValid: true };\n}\n```\n\n## üö® Impact\n\n- **Severity:** Medium\n- **User Experience:** Much better error feedback and guidance\n- **Developer Experience:** Easier debugging of import issues\n- **Support Burden:** Reduced support requests due to clearer error messages\n\n## üìã Acceptance Criteria\n\n- [ ] Specific error messages for different error types\n- [ ] Field-level validation with habit-specific error locations\n- [ ] Helpful suggestions for fixing common import issues\n- [ ] JSON syntax errors show approximate location\n- [ ] Empty file and corrupted data detection\n- [ ] Error messages are user-friendly, not technical\n- [ ] Console logging preserved for debugging",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/15/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/15/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/14",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/14/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/14/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/14/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/14",
    "id": 3438508841,
    "node_id": "I_kwDOPyeHW87M83sp",
    "number": 14,
    "title": "performance optimization computed",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:06Z",
    "updated_at": "2025-09-21T18:51:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: ‚ö° Performance Optimization - Computed Calculations\nabout: Performance issue with repeated expensive calculations in GoalsComponent\ntitle: \"Optimize computed calculations in GoalsComponent filter operations\"\nlabels: [\"performance\", \"medium\", \"optimization\", \"computed\"]\nassignees: []\n---\n\n## ‚ö° Performance Issue Description\n\nMultiple filter computations in `GoalsComponent` recalculate expensive habit statistics unnecessarily, causing performance degradation when users have many habits.\n\n## üìç Location\n\n**File:** `/src/app/features/goals/components/goals/goals.component.ts`\n**Methods:** Multiple computed properties (lines 48-157)\n\n## üîç Current Behavior\n\nSeveral computed properties repeatedly call expensive operations:\n\n```typescript\nprotected readonly filteredHabits = computed(() => {\n  // ... filtering logic that calls getHabitStats multiple times\n  return allHabits.filter(habit => {\n    const stats = this.getHabitStats(habit); // ‚ùå Expensive call per habit per filter\n    return stats.current > 0;\n  });\n});\n\nprotected readonly otherFilterOptionsWithCounts = computed(() => {\n  return this.otherFilterOptions.map(option => {\n    // ... more expensive calculations per option\n    count = allHabits.filter(habit => {\n      const stats = this.getHabitStats(habit); // ‚ùå Called again for same habits\n      return stats.current > 0;\n    }).length;\n  });\n});\n```\n\n**Performance Problems:**\n1. `getHabitStats()` called multiple times for the same habit\n2. Streak calculations repeated across different computed properties\n3. No memoization of expensive calculations\n4. O(n¬≤) complexity in some filter operations\n\n## ‚úÖ Expected Behavior\n\n- Calculate habit stats once and reuse across all computations\n- Memoize expensive operations\n- Minimize redundant calculations\n- Maintain reactive updates while improving performance\n\n## üîß Suggested Fix\n\n**1. Create memoized habit stats:**\n\n```typescript\n// Memoized habit stats computation\nprotected readonly habitStatsMap = computed(() => {\n  const habits = this.habits();\n  const statsMap = new Map<string, HabitStats>();\n  \n  for (const habit of habits) {\n    statsMap.set(habit.id, this.habitService.calcStreaksForHabit(habit));\n  }\n  \n  return statsMap;\n});\n\n// Helper method using memoized stats\nprotected getHabitStats(habit: Habit): HabitStats {\n  return this.habitStatsMap().get(habit.id) || { current: 0, longest: 0 };\n}\n```\n\n**2. Optimize filtered habits computation:**\n\n```typescript\nprotected readonly filteredHabits = computed(() => {\n  const filter = this.activeFilter();\n  const allHabits = this.habits();\n  const statsMap = this.habitStatsMap();\n  \n  switch (filter) {\n    case 'all':\n      return allHabits;\n    case 'active':\n      return allHabits.filter(habit => {\n        const stats = statsMap.get(habit.id);\n        return stats ? stats.current > 0 : false;\n      });\n    // ... other cases using statsMap\n  }\n});\n```\n\n**3. Create computed filter counts:**\n\n```typescript\nprotected readonly filterCounts = computed(() => {\n  const habits = this.habits();\n  const statsMap = this.habitStatsMap();\n  const today = new Date().toISOString().slice(0, 10);\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  \n  const counts = {\n    total: habits.length,\n    active: 0,\n    withReminders: 0,\n    recent: 0,\n    completedToday: 0,\n    badges: new Map<BadgeLevel, number>()\n  };\n  \n  // Single pass through habits to calculate all counts\n  for (const habit of habits) {\n    const stats = statsMap.get(habit.id);\n    \n    if (stats && stats.current > 0) counts.active++;\n    if (habit.reminder) counts.withReminders++;\n    if (new Date(habit.createdAt) >= sevenDaysAgo) counts.recent++;\n    if (habit.checkIns && habit.checkIns[today]) counts.completedToday++;\n    \n    // Badge counting\n    const badgeConfig = getBadgeConfigForDays(stats?.current || 0);\n    const currentCount = counts.badges.get(badgeConfig.level) || 0;\n    counts.badges.set(badgeConfig.level, currentCount + 1);\n  }\n  \n  return counts;\n});\n```\n\n**4. Use computed counts in filter options:**\n\n```typescript\nprotected readonly otherFilterOptionsWithCounts = computed(() => {\n  const counts = this.filterCounts();\n  \n  return this.otherFilterOptions.map(option => ({\n    ...option,\n    count: counts[option.value as keyof typeof counts] || 0\n  }));\n});\n```\n\n## üö® Impact\n\n- **Severity:** Medium\n- **Performance:** Significant improvement with large habit collections\n- **User Experience:** Smoother UI interactions and filtering\n- **Scalability:** Better performance as user data grows\n\n## üß™ Performance Testing\n\n1. Create 100+ habits with various check-in patterns\n2. Measure filter computation time before/after optimization\n3. Use Chrome DevTools Performance tab to profile\n4. Verify no regression in functionality\n\n## üìã Acceptance Criteria\n\n- [ ] Habit stats calculated only once per computation cycle\n- [ ] Filter operations use memoized data\n- [ ] Performance improvement measurable (>50% reduction in computation time)\n- [ ] All existing functionality preserved\n- [ ] Memory usage doesn't increase significantly\n- [ ] Reactive updates still work correctly",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/14/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/14/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/13",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/13/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/13/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/13/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/13",
    "id": 3438508829,
    "node_id": "I_kwDOPyeHW87M83sd",
    "number": 13,
    "title": "id generation collision risk",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:06Z",
    "updated_at": "2025-09-21T18:51:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üîê ID Generation Collision Risk\nabout: Data integrity issue with potential duplicate ID generation\ntitle: \"Fix ID generation collision risk in generateId method\"\nlabels: [\"bug\", \"data-integrity\", \"medium\", \"security\"]\nassignees: []\n---\n\n## üîê Data Integrity Issue Description\n\nThe current ID generation method uses `Math.random().toString(36).slice(2, 9)` which can produce duplicate IDs under high-volume usage, leading to data corruption and unpredictable behavior.\n\n## üìç Location\n\n**Files:**\n- `/src/app/shared/services/habit.service.ts` (line 475)\n- `/src/app/shared/components/import-modal/import.service.ts` (line 330)\n\n## üîç Current Behavior\n\n```typescript\nprivate generateId(): string {\n  return Math.random().toString(36).slice(2, 9);\n}\n```\n\n**Problems with this approach:**\n1. **Limited Entropy**: Only 7 characters from base-36 (0-9, a-z)\n2. **Collision Probability**: ~36^7 = 78 billion possible IDs, but birthday paradox makes collisions likely with much fewer IDs\n3. **No Collision Detection**: No mechanism to detect or prevent duplicate IDs\n4. **Predictable Pattern**: IDs follow a predictable pattern that could be exploited\n\n## ‚úÖ Expected Behavior\n\n- Generate cryptographically secure, unique identifiers\n- Extremely low collision probability even with millions of habits\n- Unpredictable ID format for security\n- Fallback mechanism for collision detection\n\n## üîß Suggested Fix\n\n**Option A: Use crypto.randomUUID() (Recommended)**\n\n```typescript\nprivate generateId(): string {\n  if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n    return crypto.randomUUID();\n  }\n  \n  // Fallback for environments without crypto.randomUUID\n  return this.generateSecureId();\n}\n\nprivate generateSecureId(): string {\n  const array = new Uint8Array(16);\n  crypto.getRandomValues(array);\n  \n  // Convert to hex string\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n```\n\n**Option B: Enhanced random ID with collision detection**\n\n```typescript\nprivate generateId(): string {\n  let id: string;\n  let attempts = 0;\n  const maxAttempts = 10;\n  \n  do {\n    id = this.generateSecureRandomId();\n    attempts++;\n    \n    if (attempts >= maxAttempts) {\n      throw new Error('Failed to generate unique ID after maximum attempts');\n    }\n  } while (this.isIdInUse(id));\n  \n  return id;\n}\n\nprivate generateSecureRandomId(): string {\n  const timestamp = Date.now().toString(36);\n  const randomPart = crypto.getRandomValues(new Uint32Array(2))\n    .reduce((acc, val) => acc + val.toString(36), '');\n  \n  return `${timestamp}-${randomPart}`;\n}\n\nprivate isIdInUse(id: string): boolean {\n  return this.habits().some(habit => habit.id === id);\n}\n```\n\n**Option C: Timestamp + Random (Good performance)**\n\n```typescript\nprivate generateId(): string {\n  const timestamp = Date.now().toString(36);\n  const random = Math.random().toString(36).substring(2, 8);\n  return `${timestamp}-${random}`;\n}\n```\n\n## üö® Impact\n\n- **Severity:** Medium\n- **Data Integrity:** Risk of habit data corruption with duplicate IDs\n- **User Experience:** Unpredictable behavior when IDs collide\n- **Scalability:** Problem worsens as user base grows\n\n## üß™ Steps to Reproduce\n\nCollision probability testing:\n1. Generate 10,000+ IDs using current method\n2. Check for duplicates using Set comparison\n3. Observe collision occurrences\n\n## üìã Acceptance Criteria\n\n- [ ] Implement cryptographically secure ID generation\n- [ ] Ensure collision probability is negligible (< 1 in 10^12)\n- [ ] Maintain reasonable ID length for storage efficiency\n- [ ] Add collision detection mechanism\n- [ ] Update both HabitService and ImportService\n- [ ] Test ID uniqueness under high load\n- [ ] Ensure backward compatibility with existing IDs",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/13/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/13/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/12",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/12/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/12/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/12/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/12",
    "id": 3438508819,
    "node_id": "I_kwDOPyeHW87M83sT",
    "number": 12,
    "title": "category assignment inconsistency",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:05Z",
    "updated_at": "2025-09-21T18:51:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üìÇ Category Assignment Inconsistency\nabout: Business logic unclear for categoryId field assignment\ntitle: \"Fix habit category assignment logic and business rules\"\nlabels: [\"business-logic\", \"low\", \"data-model\", \"cleanup\"]\nassignees: []\n---\n\n## üìÇ Business Logic Issue Description\n\nThe `categoryId` field lacks clear business rules and is inconsistently populated. In sample data, it's set to the string representation of `daysTarget`, but the model shows it as optional with no clear purpose.\n\n## üìç Location\n\n**Files:**\n- `/src/app/shared/models/habit.model.ts` (line 5)\n- `/src/app/shared/services/habit.service.ts` (sample data creation, lines 424, 434, 444, 454, 464)\n\n## üîç Current Behavior\n\n**In the model:**\n```typescript\nexport interface Habit {\n  id: string;\n  title: string;\n  daysTarget: number;\n  categoryId?: string; // Optional - will be assigned automatically\n  badge?: HabitBadge | null;\n  // ...\n}\n```\n\n**In sample data:**\n```typescript\n{\n  id: this.generateId(),\n  title: 'Morning Meditation',\n  daysTarget: 30,\n  categoryId: '30', // Set to string of daysTarget\n  // ...\n}\n```\n\n**In addHabit method:**\n```typescript\naddHabit(title: string, reminder?: Reminder | null): Habit {\n  const habit: Habit = {\n    // ...\n    daysTarget: 30,\n    // categoryId is not set at all\n    // ...\n  };\n}\n```\n\n## üö® Problems\n\n1. **Inconsistent Assignment**: Sample data sets categoryId, but addHabit doesn't\n2. **Unclear Business Purpose**: What are categories supposed to represent?\n3. **Poor Data Modeling**: Using daysTarget as categoryId suggests categories represent difficulty levels\n4. **Unused Feature**: No UI or business logic actually uses categories\n\n## ‚úÖ Expected Behavior\n\n**Option A: Implement proper category system**\n```typescript\nexport enum HabitCategory {\n  HEALTH = 'health',\n  PRODUCTIVITY = 'productivity',\n  LEARNING = 'learning',\n  FITNESS = 'fitness',\n  MINDFULNESS = 'mindfulness',\n  SOCIAL = 'social'\n}\n\nexport interface Habit {\n  // ...\n  categoryId?: HabitCategory;\n  // ...\n}\n```\n\n**Option B: Remove unused categoryId field**\n```typescript\nexport interface Habit {\n  id: string;\n  title: string;\n  daysTarget: number;\n  // Remove categoryId entirely\n  badge?: HabitBadge | null;\n  // ...\n}\n```\n\n## üîß Suggested Fix\n\n**Recommended: Option B (Remove unused field)**\n\n1. **Update Habit model:**\n```typescript\nexport interface Habit {\n  id: string;\n  title: string;\n  daysTarget: number;\n  badge?: HabitBadge | null;\n  color: string;\n  createdAt: string;\n  checkIns: Record<string, string>;\n  reminder?: Reminder | null;\n}\n```\n\n2. **Remove from sample data:**\n```typescript\n{\n  id: this.generateId(),\n  title: 'Morning Meditation',\n  daysTarget: 30,\n  // Remove categoryId: '30',\n  color: this.COLORS[0],\n  // ...\n}\n```\n\n3. **Add migration for existing data:**\n```typescript\nprivate migrateHabits(habits: Habit[]): Habit[] {\n  return habits.map(habit => {\n    const { categoryId, ...cleanHabit } = habit as any;\n    return cleanHabit;\n  });\n}\n```\n\n## üö® Impact\n\n- **Severity:** Low\n- **Data Model:** Cleaner, more focused interface\n- **Maintainability:** Removes unused/confusing field\n- **Performance:** Slightly reduced memory usage\n\n## üìã Acceptance Criteria\n\n- [ ] Decide whether to implement or remove categoryId\n- [ ] Update Habit interface accordingly\n- [ ] Remove categoryId from sample data if unused\n- [ ] Add data migration for existing users\n- [ ] Update any TypeScript interfaces that reference categories\n- [ ] Ensure no runtime errors from missing categoryId",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/12/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/12/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/11",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/11/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/11/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/11/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/11",
    "id": 3438508808,
    "node_id": "I_kwDOPyeHW87M83sI",
    "number": 11,
    "title": "badge award logic error",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:05Z",
    "updated_at": "2025-09-21T18:51:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üèÜ Badge Award Logic Error\nabout: Business logic issue with badges awarded for 0 days completed\ntitle: \"Fix badge progression logic - badges awarded incorrectly for 0 days\"\nlabels: [\"bug\", \"business-logic\", \"medium\", \"badge-system\"]\nassignees: []\n---\n\n## üèÜ Business Logic Issue Description\n\nThe `getBadgeForProgress` method always returns a badge even for 0 days completed, contradicting the intended achievement system where badges should only be awarded after reaching specific milestones.\n\n## üìç Location\n\n**File:** `/src/app/shared/services/habit.service.ts`\n**Method:** `getBadgeForProgress()` (lines 160-171)\n\n## üîç Current Behavior\n\n```typescript\nprivate getBadgeForProgress(completedDays: number): HabitBadge | null {\n  const badgeConfig = getBadgeConfigForDays(completedDays);\n  \n  return {\n    level: badgeConfig.level,\n    name: badgeConfig.name,\n    description: badgeConfig.description,\n    icon: badgeConfig.icon,\n    daysRequired: badgeConfig.daysRequired,\n    achievedAt: new Date().toISOString()\n  };\n}\n```\n\n**Problem:** This method always returns a badge, even for 0 days, because `getBadgeConfigForDays(0)` returns the \"Novice\" badge config.\n\n## ‚úÖ Expected Behavior\n\n- Users should start with no badge (null)\n- Badges should only be awarded when the required days are actually completed\n- Badge achievement should be a meaningful milestone, not a default state\n\n## üîß Suggested Fix\n\n```typescript\nprivate getBadgeForProgress(completedDays: number): HabitBadge | null {\n  // Don't award any badge for 0 days completed\n  if (completedDays === 0) {\n    return null;\n  }\n\n  const badgeConfig = getBadgeConfigForDays(completedDays);\n  \n  // Only award badge if user has actually reached the requirement\n  if (completedDays >= badgeConfig.daysRequired) {\n    return {\n      level: badgeConfig.level,\n      name: badgeConfig.name,\n      description: badgeConfig.description,\n      icon: badgeConfig.icon,\n      daysRequired: badgeConfig.daysRequired,\n      achievedAt: new Date().toISOString()\n    };\n  }\n  \n  return null;\n}\n```\n\n**Alternative approach - Award badges only on milestone achievement:**\n\n```typescript\nprivate shouldAwardNewBadge(habit: Habit, completedDays: number): HabitBadge | null {\n  const currentBadgeLevel = habit.badge?.level;\n  const newBadgeConfig = getBadgeConfigForDays(completedDays);\n  \n  // Don't award badge for 0 days\n  if (completedDays === 0) return null;\n  \n  // Only award if this is a new milestone and user has reached it\n  if (completedDays >= newBadgeConfig.daysRequired && \n      newBadgeConfig.level !== currentBadgeLevel) {\n    return {\n      level: newBadgeConfig.level,\n      name: newBadgeConfig.name,\n      description: newBadgeConfig.description,\n      icon: newBadgeConfig.icon,\n      daysRequired: newBadgeConfig.daysRequired,\n      achievedAt: new Date().toISOString()\n    };\n  }\n  \n  return habit.badge; // Keep existing badge\n}\n```\n\n## üö® Impact\n\n- **Severity:** Medium\n- **User Experience:** False sense of achievement diminishes badge value\n- **Business Logic:** Contradicts gamification principles\n- **Motivation:** Reduces impact of actual achievements\n\n## üß™ Steps to Reproduce\n\n1. Create a new habit\n2. Observe that it immediately has a \"Novice\" badge despite 0 days completed\n3. Badge should only appear after first successful check-in\n\n## üìã Acceptance Criteria\n\n- [ ] New habits start with no badge (null)\n- [ ] Badges are only awarded when milestones are actually reached\n- [ ] Badge progression shows clear achievement moments\n- [ ] Existing habits with incorrect badges are handled gracefully\n- [ ] UI properly handles null badge state\n- [ ] Badge achievement triggers appropriate celebration/notification",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/11/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/11/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/10",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/10/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/10/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/10/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/10",
    "id": 3438508799,
    "node_id": "I_kwDOPyeHW87M83r_",
    "number": 10,
    "title": "mixed state management",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:04Z",
    "updated_at": "2025-09-21T18:51:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üèóÔ∏è Mixed State Management Patterns\nabout: Architecture issue with BehaviorSubject and signals used together\ntitle: \"Fix mixed state management patterns in HabitService\"\nlabels: [\"architecture\", \"medium\", \"refactor\", \"state-management\"]\nassignees: []\n---\n\n## üèóÔ∏è Architecture Issue Description\n\nThe `HabitService` uses both RxJS `BehaviorSubject` and Angular signals for the same data, creating potential synchronization issues and architectural inconsistency.\n\n## üìç Location\n\n**File:** `/src/app/shared/services/habit.service.ts`\n**Lines:** 15-17, 119-122\n\n## üîç Current Behavior\n\n```typescript\nexport class HabitService {\n  // Uses BehaviorSubject\n  private habitsSubject = new BehaviorSubject<Habit[]>(this.loadHabits());\n  public habits$ = this.habitsSubject.asObservable();\n  \n  // Also uses signals for the same data\n  public habits = signal(this.habitsSubject.value);\n\n  constructor() {\n    // Manual synchronization required\n    this.habits$.subscribe(habits => {\n      this.habits.set(habits);\n      this.saveHabits(habits);\n    });\n  }\n}\n```\n\n## üö® Problems\n\n1. **Dual State Sources**: Same data managed by two different reactive systems\n2. **Manual Synchronization**: Requires manual subscription to keep signals in sync\n3. **Memory Overhead**: Duplicate state storage\n4. **Potential Race Conditions**: Updates to one system might not immediately reflect in the other\n5. **Architectural Inconsistency**: Mixing paradigms makes code harder to maintain\n\n## ‚úÖ Expected Behavior\n\nChoose one consistent state management approach:\n- **Option A**: Pure signals (recommended for Angular 17+)\n- **Option B**: Pure RxJS observables\n\n## üîß Suggested Fix\n\n**Option A: Migrate to Pure Signals (Recommended)**\n\n```typescript\n@Injectable({\n  providedIn: 'root'\n})\nexport class HabitService {\n  private readonly LS_KEY = 'habitbuddy_v2_local';\n  \n  // Single source of truth using signals\n  public habits = signal(this.loadHabits());\n\n  // Computed signals for derived state\n  public totalCompleted = computed(() => \n    this.habits().reduce((sum, habit) => sum + Object.keys(habit.checkIns || {}).length, 0)\n  );\n\n  public averageCompletion = computed(() => {\n    const habits = this.habits();\n    if (habits.length === 0) return 0;\n    const totalCompletion = habits.reduce((sum, habit) => {\n      const completed = Object.keys(habit.checkIns || {}).length;\n      return sum + (completed / habit.daysTarget * 100);\n    }, 0);\n    return Math.round(totalCompletion / habits.length);\n  });\n\n  constructor() {\n    // Auto-save when habits change\n    effect(() => {\n      this.saveHabits(this.habits());\n    });\n  }\n\n  addHabit(title: string, reminder?: Reminder | null): Habit {\n    const habit: Habit = {\n      id: this.generateId(),\n      title: title.trim(),\n      daysTarget: 30,\n      color: this.pickColor(this.habits().length),\n      createdAt: new Date().toISOString().slice(0, 10),\n      checkIns: {},\n      reminder: reminder || null,\n      badge: null\n    };\n\n    this.habits.update(habits => [habit, ...habits]);\n    return habit;\n  }\n\n  removeHabit(id: string): void {\n    this.habits.update(habits => habits.filter(habit => habit.id !== id));\n  }\n\n  updateHabitsList(habits: Habit[]): void {\n    this.habits.set(habits);\n  }\n}\n```\n\n**Option B: Pure RxJS (Alternative)**\n\n```typescript\n@Injectable({\n  providedIn: 'root'\n})\nexport class HabitService {\n  private habitsSubject = new BehaviorSubject<Habit[]>(this.loadHabits());\n  public habits$ = this.habitsSubject.asObservable();\n\n  // Computed observables\n  public totalCompleted$ = this.habits$.pipe(\n    map(habits => habits.reduce((sum, habit) => sum + Object.keys(habit.checkIns || {}).length, 0))\n  );\n\n  public averageCompletion$ = this.habits$.pipe(\n    map(habits => {\n      if (habits.length === 0) return 0;\n      const totalCompletion = habits.reduce((sum, habit) => {\n        const completed = Object.keys(habit.checkIns || {}).length;\n        return sum + (completed / habit.daysTarget * 100);\n      }, 0);\n      return Math.round(totalCompletion / habits.length);\n    })\n  );\n\n  constructor() {\n    this.habits$.subscribe(habits => this.saveHabits(habits));\n  }\n}\n```\n\n## üö® Impact\n\n- **Severity:** Medium\n- **Architecture:** Improves consistency and maintainability\n- **Performance:** Reduces memory overhead and eliminates manual synchronization\n- **Developer Experience:** Clearer, more predictable state management\n\n## üìã Acceptance Criteria\n\n- [ ] Choose and implement single state management approach\n- [ ] Remove manual synchronization code\n- [ ] Update all components to use consistent API\n- [ ] Ensure no regression in functionality\n- [ ] Update computed values to use chosen approach\n- [ ] Add unit tests for state management",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/10/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/10/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/9",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/9/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/9/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/9/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/9",
    "id": 3438508791,
    "node_id": "I_kwDOPyeHW87M83r3",
    "number": 9,
    "title": "duplicate reminder intervals",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:04Z",
    "updated_at": "2025-09-21T18:51:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: ‚ö° Duplicate Reminder Checking Intervals\nabout: Performance issue with multiple components creating redundant intervals\ntitle: \"Remove duplicate reminder checking intervals across components\"\nlabels: [\"performance\", \"architecture\", \"medium\", \"refactor\"]\nassignees: []\n---\n\n## ‚ö° Performance Issue Description\n\nMultiple components (Goals, Stats, Calendar, Reminders) all create their own 30-second intervals for reminder checking, causing unnecessary resource usage and potential conflicts.\n\n## üìç Location\n\n**Files:**\n- `/src/app/features/goals/components/goals/goals.component.ts` (lines 181-185)\n- `/src/app/features/statistics/components/stats/stats.component.ts` (lines 48-55)\n- `/src/app/features/calendar/components/calendar/calendar.component.ts` (lines 81-87)\n- `/src/app/features/reminders/components/reminders/reminders.component.ts` (lines 42-48)\n\n## üîç Current Behavior\n\nEach component creates its own interval:\n```typescript\n// In ngOnInit of each component\nsetInterval(() => {\n  this.checkReminders();\n}, 30000);\n```\n\nThis results in:\n- 4+ concurrent intervals running the same reminder check\n- Unnecessary CPU usage and battery drain\n- Potential race conditions\n- Memory leaks if intervals aren't properly cleaned up\n\n## ‚úÖ Expected Behavior\n\n- Single centralized reminder checking service\n- One interval for the entire application\n- Components subscribe to reminder events\n- Proper cleanup and lifecycle management\n\n## üîß Suggested Fix\n\n**1. Create a centralized ReminderSchedulerService:**\n\n```typescript\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReminderSchedulerService {\n  private intervalId?: number;\n  private readonly CHECK_INTERVAL = 30000; // 30 seconds\n  \n  constructor(\n    private notificationService: NotificationService,\n    private habitService: HabitService\n  ) {}\n\n  start(): void {\n    if (this.intervalId) return; // Already running\n    \n    if (typeof window !== 'undefined') {\n      this.intervalId = window.setInterval(() => {\n        this.checkReminders();\n      }, this.CHECK_INTERVAL);\n      \n      // Check immediately\n      this.checkReminders();\n    }\n  }\n\n  stop(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = undefined;\n    }\n  }\n\n  private checkReminders(): void {\n    const habits = this.habitService.habits();\n    this.notificationService.checkReminders(habits);\n  }\n}\n```\n\n**2. Initialize in app.config.ts:**\n\n```typescript\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    // ... existing providers\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (reminderScheduler: ReminderSchedulerService) => () => {\n        reminderScheduler.start();\n      },\n      deps: [ReminderSchedulerService],\n      multi: true\n    }\n  ]\n};\n```\n\n**3. Remove intervals from individual components**\n\n## üö® Impact\n\n- **Severity:** Medium\n- **Performance:** Reduced CPU usage and battery drain\n- **Architecture:** Cleaner separation of concerns\n- **Maintainability:** Single point of control for reminder scheduling\n\n## üìã Acceptance Criteria\n\n- [ ] Single ReminderSchedulerService created\n- [ ] All component-level intervals removed\n- [ ] Service properly initialized at app startup\n- [ ] Service properly cleaned up on app shutdown\n- [ ] No regression in reminder functionality\n- [ ] Performance improvement measurable in DevTools",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/9/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/9/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/8",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/8/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/8/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/8/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/8",
    "id": 3438508782,
    "node_id": "I_kwDOPyeHW87M83ru",
    "number": 8,
    "title": "reminder window validation bug",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:03Z",
    "updated_at": "2025-09-21T18:51:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üêõ Reminder Window Validation Bug\nabout: Incorrect time window calculation for check-ins\ntitle: \"Fix reminder window validation logic in canCheckIn method\"\nlabels: [\"bug\", \"high\", \"logic-error\", \"reminders\"]\nassignees: []\n---\n\n## üêõ Bug Description\n\nThe reminder window validation in `canCheckIn` method has incorrect logic that may allow check-ins outside the intended time window or block valid check-ins within the window.\n\n## üìç Location\n\n**File:** `/src/app/shared/services/habit.service.ts`\n**Method:** `canCheckIn()` (lines 233-265)\n\n## üîç Current Behavior\n\n```typescript\nconst diff = Math.min(\n  Math.abs(minsNow - target),\n  24 * 60 - Math.abs(minsNow - target)\n);\n\nif (diff > window / 2) {\n  return { ok: false, msg: `Check-in allowed only within ${Math.round(window / 60 * 100) / 100}h window around reminder.` };\n}\n```\n\nIssues with current logic:\n1. The window calculation doesn't properly handle time boundaries (e.g., around midnight)\n2. Using `window / 2` suggests the window should be centered around the target time, but this isn't clearly documented\n3. The circular time calculation may not work correctly for all time ranges\n\n## ‚úÖ Expected Behavior\n\n- Check-ins should be allowed within a specified time window around the reminder time\n- Window calculation should properly handle day boundaries\n- Clear documentation of whether window is total duration or radius around target time\n\n## üîß Suggested Fix\n\n```typescript\nprivate canCheckIn(habit: Habit): { ok: boolean; msg?: string } {\n  if (this.hasClockTampering()) {\n    return { ok: false, msg: 'Clock tampering detected. Check-in disabled.' };\n  }\n\n  const today = this.getTodayString();\n  if (habit.checkIns && habit.checkIns[today]) {\n    return { ok: false, msg: 'Already checked in today.' };\n  }\n\n  if (habit.reminder) {\n    const now = new Date();\n    const currentMinutes = now.getHours() * 60 + now.getMinutes();\n    const targetMinutes = this.hhmmToMins(habit.reminder.time);\n    const windowMinutes = habit.reminder.window || this.DEFAULT_WINDOW_MIN;\n    const weekday = now.getDay();\n\n    if (!habit.reminder.days.includes(weekday)) {\n      return { ok: false, msg: 'Today is not a scheduled reminder day for this habit.' };\n    }\n\n    // Calculate the minimum distance considering 24-hour wrap-around\n    const directDiff = Math.abs(currentMinutes - targetMinutes);\n    const wrapAroundDiff = (24 * 60) - directDiff;\n    const minDiff = Math.min(directDiff, wrapAroundDiff);\n\n    // Check if current time is within the allowed window (total window, not radius)\n    if (minDiff > windowMinutes / 2) {\n      const windowHours = Math.round((windowMinutes / 60) * 100) / 100;\n      return { \n        ok: false, \n        msg: `Check-in allowed only within ${windowHours}h window around ${habit.reminder.time}.` \n      };\n    }\n  }\n\n  return { ok: true };\n}\n```\n\n## üö® Impact\n\n- **Severity:** High\n- **User Impact:** Users may be blocked from valid check-ins or allowed invalid ones\n- **Business Logic:** Reminder system effectiveness compromised\n\n## üß™ Steps to Reproduce\n\n1. Set a reminder for 23:30 with a 2-hour window\n2. Try to check in at 00:30 (should be within window but may be blocked)\n3. Test various edge cases around midnight and day boundaries\n\n## üìã Acceptance Criteria\n\n- [ ] Window calculation properly handles 24-hour time boundaries\n- [ ] Clear definition of window (total duration vs radius) in documentation\n- [ ] Edge cases around midnight work correctly\n- [ ] Window size validation prevents invalid configurations\n- [ ] Unit tests cover all time boundary scenarios",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/8/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/8/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/7",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/7/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/7/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/7/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/7",
    "id": 3438508776,
    "node_id": "I_kwDOPyeHW87M83ro",
    "number": 7,
    "title": "clock tampering detection error",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:03Z",
    "updated_at": "2025-09-21T18:51:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üîí Clock Tampering Detection Logic Error\nabout: Security vulnerability in clock tampering detection\ntitle: \"Fix clock tampering detection logic in hasClockTampering method\"\nlabels: [\"bug\", \"security\", \"critical\", \"logic-error\"]\nassignees: []\n---\n\n## üîí Security Issue Description\n\nThe clock tampering detection logic has an incorrect time comparison that will never properly detect actual clock tampering, creating a security vulnerability in the check-in system.\n\n## üìç Location\n\n**File:** `/src/app/shared/services/habit.service.ts`\n**Method:** `hasClockTampering()` (lines 498-508)\n\n## üîç Current Behavior\n\n```typescript\nprivate hasClockTampering(): boolean {\n  try {\n    if (typeof window === 'undefined') return false;\n    const last = JSON.parse(localStorage.getItem(this.LAST_TS_KEY) || '0');\n    if (!last) return false;\n    const now = Date.now();\n    return now + 2000 < last - 120000; // ‚ùå This logic is incorrect\n  } catch {\n    return false;\n  }\n}\n```\n\nThe condition `now + 2000 < last - 120000` is mathematically flawed and will rarely trigger.\n\n## ‚úÖ Expected Behavior\n\nClock tampering should be detected when:\n1. Current time is significantly before the last recorded timestamp (clock set backward)\n2. Time difference exceeds a reasonable threshold for normal system clock drift\n\n## üîß Suggested Fix\n\n```typescript\nprivate hasClockTampering(): boolean {\n  try {\n    if (typeof window === 'undefined') return false;\n    const lastTimestamp = JSON.parse(localStorage.getItem(this.LAST_TS_KEY) || '0');\n    if (!lastTimestamp) return false;\n    \n    const now = Date.now();\n    const timeDifference = now - lastTimestamp;\n    \n    // Detect if current time is more than 2 minutes before last recorded time\n    // This indicates the clock was set backward\n    const TAMPERING_THRESHOLD = -2 * 60 * 1000; // -2 minutes in milliseconds\n    \n    return timeDifference < TAMPERING_THRESHOLD;\n  } catch {\n    return false;\n  }\n}\n```\n\n## üö® Impact\n\n- **Severity:** Critical (Security)\n- **Security Risk:** Users can manipulate system clock to bypass check-in restrictions\n- **Business Logic:** Compromises habit tracking integrity\n- **Data Integrity:** Allows false check-in data\n\n## üß™ Steps to Reproduce\n\n1. Perform a check-in to set a timestamp\n2. Change system clock to a time before the check-in\n3. Attempt another check-in\n4. Observe that clock tampering is not detected\n\n## üìã Acceptance Criteria\n\n- [ ] Clock tampering is properly detected when system time moves backward significantly\n- [ ] Normal clock drift (few seconds/minutes) doesn't trigger false positives\n- [ ] Clear error message when tampering is detected\n- [ ] Threshold is configurable for different use cases\n- [ ] Unit tests verify tampering detection accuracy",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/7/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/7/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/6",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/6/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/6/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/6/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/6",
    "id": 3438508764,
    "node_id": "I_kwDOPyeHW87M83rc",
    "number": 6,
    "title": "streak calculation bug",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:02Z",
    "updated_at": "2025-09-21T18:51:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üêõ Streak Calculation Logic Bug\nabout: Critical bug in streak calculation causing incorrect current streaks\ntitle: \"Fix streak calculation bug in calcStreaksForHabit method\"\nlabels: [\"bug\", \"critical\", \"logic-error\", \"streaks\"]\nassignees: []\n---\n\n## üêõ Bug Description\n\nThe current streak calculation in `calcStreaksForHabit` has flawed logic that doesn't properly handle gaps in check-ins and may give false positive streaks, leading to incorrect streak displays.\n\n## üìç Location\n\n**File:** `/src/app/shared/services/habit.service.ts`\n**Method:** `calcStreaksForHabit()` (lines 286-321)\n\n## üîç Current Behavior\n\nThe current streak calculation logic has several issues:\n1. Doesn't properly handle gaps between check-ins\n2. May count non-consecutive days as part of a streak\n3. Current streak calculation starts from today but doesn't validate consecutive days properly\n\n## ‚úÖ Expected Behavior\n\n- Current streak should only count consecutive days ending today\n- Longest streak should find the actual longest consecutive sequence\n- Gaps in check-ins should break streaks properly\n\n## üîß Suggested Fix\n\n```typescript\ncalcStreaksForHabit(habit: Habit): HabitStats {\n  const checkIns = habit.checkIns || {};\n  const sortedDates = Object.keys(checkIns).sort();\n  \n  if (sortedDates.length === 0) {\n    return { current: 0, longest: 0 };\n  }\n\n  let longest = 0;\n  let current = 0;\n  \n  // Calculate longest streak\n  let currentStreak = 1;\n  for (let i = 1; i < sortedDates.length; i++) {\n    const prevDate = new Date(sortedDates[i - 1]);\n    const currentDate = new Date(sortedDates[i]);\n    const diffTime = currentDate.getTime() - prevDate.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) {\n      currentStreak++;\n    } else {\n      longest = Math.max(longest, currentStreak);\n      currentStreak = 1;\n    }\n  }\n  longest = Math.max(longest, currentStreak);\n  \n  // Calculate current streak (must end today)\n  const today = new Date().toISOString().slice(0, 10);\n  if (checkIns[today]) {\n    current = 1;\n    let checkDate = new Date();\n    checkDate.setDate(checkDate.getDate() - 1);\n    \n    while (checkIns[checkDate.toISOString().slice(0, 10)]) {\n      current++;\n      checkDate.setDate(checkDate.getDate() - 1);\n    }\n  }\n  \n  return { current, longest };\n}\n```\n\n## üö® Impact\n\n- **Severity:** Critical\n- **User Impact:** Incorrect streak counts demotivate users\n- **Data Integrity:** False streak information affects user engagement\n\n## üß™ Steps to Reproduce\n\n1. Create a habit with check-ins: Day 1, Day 3, Day 4, Day 5 (gap between Day 1 and Day 3)\n2. Check current streak calculation\n3. Verify it incorrectly includes Day 1 in the streak\n\n## üìã Acceptance Criteria\n\n- [ ] Current streak only counts consecutive days ending today\n- [ ] Longest streak finds actual longest consecutive sequence\n- [ ] Gaps properly break streak calculations\n- [ ] Edge cases (single day, no check-ins) handled correctly\n- [ ] Unit tests verify all streak scenarios",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/6/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/6/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/5",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/5/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/5/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/5/events",
    "html_url": "https://github.com/achrya/habit-buddy/issues/5",
    "id": 3438508762,
    "node_id": "I_kwDOPyeHW87M83ra",
    "number": 5,
    "title": "badge system inconsistency",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:51:01Z",
    "updated_at": "2025-09-21T18:51:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "---\nname: üêõ Badge System Logic Inconsistency\nabout: Critical bug in badge progression system causing conflicts\ntitle: \"Fix HabitService badge logic inconsistency in daysTarget assignment\"\nlabels: [\"bug\", \"critical\", \"logic-error\", \"badge-system\"]\nassignees: []\n---\n\n## üêõ Bug Description\n\nThe badge progression system has conflicting logic where `addHabit` sets `daysTarget` to 30, but `updateHabitBadge` recalculates it based on badge levels, creating inconsistent behavior in the habit tracking system.\n\n## üìç Location\n\n**File:** `/src/app/shared/services/habit.service.ts`\n**Methods:** `addHabit()` (line 143) and `updateHabitBadge()` (line 173)\n\n## üîç Current Behavior\n\n1. When a new habit is created via `addHabit()`, `daysTarget` is hardcoded to 30 days\n2. When `updateHabitBadge()` is called during check-ins, it recalculates `daysTarget` based on the current badge level\n3. This creates inconsistent targets and confuses the badge progression system\n\n## ‚úÖ Expected Behavior\n\n- Badge progression should have consistent `daysTarget` logic\n- Either set initial `daysTarget` based on badge level OR don't modify it in `updateHabitBadge`\n- Badge requirements should be clearly defined and consistently applied\n\n## üîß Suggested Fix\n\n```typescript\n// Option 1: Fix addHabit to use badge-based daysTarget\naddHabit(title: string, reminder?: Reminder | null): Habit {\n  const habit: Habit = {\n    id: this.generateId(),\n    title: title.trim(),\n    daysTarget: BADGE_LEVELS[0].daysRequired, // Use initial badge requirement\n    color: this.pickColor(this.habits().length),\n    createdAt: new Date().toISOString().slice(0, 10),\n    checkIns: {},\n    reminder: reminder || null,\n    badge: null\n  };\n  // ... rest of method\n}\n\n// Option 2: Remove daysTarget modification from updateHabitBadge\nprivate updateHabitBadge(habit: Habit): Habit {\n  const completedDays = Object.keys(habit.checkIns || {}).length;\n  const newBadge = this.getBadgeForProgress(completedDays);\n  \n  return {\n    ...habit,\n    badge: newBadge\n    // Remove daysTarget modification\n  };\n}\n```\n\n## üö® Impact\n\n- **Severity:** Critical\n- **User Impact:** Confusing badge progression and incorrect target displays\n- **Data Integrity:** Risk of inconsistent habit data\n\n## üß™ Steps to Reproduce\n\n1. Create a new habit\n2. Check in for several days\n3. Observe how `daysTarget` changes inconsistently\n4. Compare with badge level requirements\n\n## üìã Acceptance Criteria\n\n- [ ] Badge progression logic is consistent across all methods\n- [ ] `daysTarget` follows a single, clear business rule\n- [ ] Existing habits are migrated to use consistent logic\n- [ ] Unit tests verify badge progression accuracy",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/5/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/5/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/achrya/habit-buddy/issues/4",
    "repository_url": "https://api.github.com/repos/achrya/habit-buddy",
    "labels_url": "https://api.github.com/repos/achrya/habit-buddy/issues/4/labels{/name}",
    "comments_url": "https://api.github.com/repos/achrya/habit-buddy/issues/4/comments",
    "events_url": "https://api.github.com/repos/achrya/habit-buddy/issues/4/events",
    "html_url": "https://github.com/achrya/habit-buddy/pull/4",
    "id": 3438493752,
    "node_id": "PR_kwDOPyeHW86ptwIS",
    "number": 4,
    "title": "feat: Add SPA routing for GitHub Pages",
    "user": {
      "login": "ramjawade",
      "id": 46644972,
      "node_id": "MDQ6VXNlcjQ2NjQ0OTcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/46644972?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ramjawade",
      "html_url": "https://github.com/ramjawade",
      "followers_url": "https://api.github.com/users/ramjawade/followers",
      "following_url": "https://api.github.com/users/ramjawade/following{/other_user}",
      "gists_url": "https://api.github.com/users/ramjawade/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ramjawade/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ramjawade/subscriptions",
      "organizations_url": "https://api.github.com/users/ramjawade/orgs",
      "repos_url": "https://api.github.com/users/ramjawade/repos",
      "events_url": "https://api.github.com/users/ramjawade/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ramjawade/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-09-21T18:35:45Z",
    "updated_at": "2025-09-21T18:56:49Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/pulls/4",
      "html_url": "https://github.com/achrya/habit-buddy/pull/4",
      "diff_url": "https://github.com/achrya/habit-buddy/pull/4.diff",
      "patch_url": "https://github.com/achrya/habit-buddy/pull/4.patch",
      "merged_at": null
    },
    "body": null,
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/achrya/habit-buddy/issues/4/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/achrya/habit-buddy/issues/4/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  }
]
